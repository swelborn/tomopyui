# generated by datamodel-codegen:
#   filename:  import_metadata.json
#   timestamp: 2024-02-16T18:52:43+00:00

from __future__ import annotations
from enum import Enum

from typing import Optional

from pydantic import BaseModel, Field


class PixelUnits(str, Enum):
    nm = "nm"
    um = "um"
    mm = "mm"
    cm = "cm"


class EnergyUnits(str, Enum):
    eV = "eV"
    keV = "keV"


class Binning(str, Enum):
    none = "None"
    two = "2"
    four = "4"
    eight = "8"


class PrenormProjectionsMetadata(BaseModel):
    metadata_type: str
    data_hierarchy_level: int
    start_angle: int
    end_angle: int
    pixel_size: int
    pixel_units: str
    energy: float
    energy_units: str
    binning: Optional[int] = None
    pxX: int
    pxY: int
    pxZ: int


class PrenormProjectionsMetadataNew(BaseModel):
    start_angle: float = Field(-90, description="Starting angle (\u00b0)")
    end_angle: float = Field(90, description="Ending angle (\u00b0)")
    pixel_size: float = Field(30, description="Pixel size (no binning)")
    pixel_units: PixelUnits = Field(PixelUnits.nm, description="Pixel size units")
    energy: float = Field(8000, description="Energy")
    energy_units: EnergyUnits = Field(EnergyUnits.eV, description="Energy units")
    binning: Optional[Binning] = Field(Binning.two, description="Binning")


groupings = [
    ["start_angle", "end_angle"],
    ["pixel_size", "pixel_units", "binning"],
    ["energy", "energy_units"],
]
